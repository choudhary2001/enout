generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String?
  role       UserRole
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  broadcasts Broadcast[]
  events     Event[]

  @@map("users")
}

model Event {
  id              String           @id @default(cuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  timezone        String
  status          String
  location        String?
  createdBy       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  imageUrl        String?
  attendees       Attendee[]
  broadcasts      Broadcast[]
  creator         User             @relation(fields: [createdBy], references: [id])
  invites         Invite[]
  itineraryItems  ItineraryItem[]
  mobileMessages  MobileMessage[]
  roomAssignments RoomAssignment[]
  rooms           Room[]

  @@map("events")
}

model ItineraryItem {
  id          String   @id @default(cuid())
  eventId     String
  start       DateTime
  end         DateTime
  title       String
  description String?
  location    String?
  notes       String?
  color       String?
  allDay      Boolean  @default(false)
  type        String   @default("meeting")
  order       Int      @default(0)
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId, start, end])
  @@index([eventId, order])
  @@map("itinerary_items")
}

model Invite {
  id             String          @id @default(cuid())
  eventId        String
  email          String
  firstName      String?
  lastName       String?
  countryCode    String?
  phone          String?
  status         String          @default("pending")
  lastSentAt     DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  event          Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  mobileMessages MobileMessage[]

  @@unique([eventId, email])
  @@map("invites")
}

model Attendee {
  id                  String          @id @default(cuid())
  eventId             String
  email               String
  firstName           String
  lastName            String
  phone               String?
  city                String?
  dietaryRequirements String?
  drinkPref           String?
  workEmail           String?
  location            String?
  gender              String?
  acceptedAt          DateTime?
  tasksJson           Json            @default("{}")
  idDocUrl            String?
  phoneVerified       Boolean         @default(false)
  derivedStatus       String          @default("not_invited")
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  lastSentAt          DateTime?
  countryCode         String?
  event               Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  mobileMessages      MobileMessage[]
  roomAssignment      RoomAssignment?

  @@unique([eventId, email])
  @@index([eventId, derivedStatus])
  @@map("attendees")
}

model Room {
  id          String           @id @default(cuid())
  eventId     String
  roomNo      String
  category    String
  maxGuests   Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  assignments RoomAssignment[]
  event       Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, roomNo])
  @@index([eventId, category])
  @@map("rooms")
}

model RoomAssignment {
  id         String   @id @default(cuid())
  eventId    String
  roomId     String
  slot       Int
  attendeeId String   @unique
  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([eventId, attendeeId])
  @@unique([roomId, slot])
  @@map("room_assignments")
}

model Broadcast {
  id          String       @id @default(cuid())
  eventId     String
  title       String
  subject     String
  bodyHtml    String
  status      String       @default("draft")
  audience    String       @default("all")
  scheduledAt DateTime?
  sentAt      DateTime?
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attachments Attachment[]
  creator     User         @relation(fields: [createdBy], references: [id])
  event       Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId, status])
  @@index([eventId, sentAt])
  @@map("broadcasts")
}

model Attachment {
  id          String    @id @default(cuid())
  broadcastId String
  name        String
  url         String
  mime        String
  size        Int
  broadcast   Broadcast @relation(fields: [broadcastId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model MobileMessage {
  id             String    @id @default(cuid())
  eventId        String
  attendeeId     String?
  title          String
  body           String
  attachments    Json?
  unread         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  status         String    @default("sent")
  deliveredAt    DateTime?
  deliveryStatus String    @default("delivered")
  inviteId       String?
  attendee       Attendee? @relation(fields: [attendeeId], references: [id])
  event          Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  invite         Invite?   @relation(fields: [inviteId], references: [id])

  @@index([eventId, createdAt])
  @@index([inviteId])
  @@index([deliveryStatus])
  @@map("mobile_messages")
}

model Admin {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  role          AdminRole      @default(ADMIN)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]

  @@map("admins")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  adminId   String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@map("refresh_tokens")
}

enum UserRole {
  ADMIN
  HR
  USER

  @@map("user_roles")
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN

  @@map("admin_roles")
}
