import jsPDF from 'jspdf';
import { Room, AttendeeLite } from '@/features/rooms/api';

/**
 * Generate a professional rooming plan PDF
 * @param rooms - Array of rooms with assignments
 * @param eligibleAttendees - All attendees
 * @param eventName - Name of the event
 */
export async function generateRoomingPlanPDF(
  rooms: Room[],
  eligibleAttendees: AttendeeLite[],
  eventName: string = 'Event'
): Promise<void> {
  // Create new PDF document
  const pdf = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 15;
  const contentWidth = pageWidth - 2 * margin;

  let yPosition = margin;

  // 1. Title
  pdf.setFontSize(20);
  pdf.setFont(undefined, 'bold');
  pdf.text('Rooming Plan', margin, yPosition);
  yPosition += 10;

  // 2. Event Info
  pdf.setFontSize(11);
  pdf.setFont(undefined, 'normal');
  pdf.text(`Event: ${eventName}`, margin, yPosition);
  yPosition += 6;
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, margin, yPosition);
  yPosition += 10;

  // 3. Summary Statistics
  const totalRooms = rooms.length;
  const totalAssigned = rooms.reduce((sum, room) => {
    return sum + room.assignments.filter(a => a.attendeeId).length;
  }, 0);
  const totalCapacity = rooms.reduce((sum, room) => sum + room.maxGuests, 0);

  pdf.setFontSize(10);
  pdf.setFont(undefined, 'bold');
  pdf.text('Summary:', margin, yPosition);
  yPosition += 5;

  pdf.setFont(undefined, 'normal');
  pdf.text(`Total Rooms: ${totalRooms}`, margin + 5, yPosition);
  yPosition += 4;
  pdf.text(`Guests Assigned: ${totalAssigned}`, margin + 5, yPosition);
  yPosition += 4;
  pdf.text(`Total Capacity: ${totalCapacity}`, margin + 5, yPosition);
  yPosition += 10;

  // 4. Room Details Table
  pdf.setFontSize(12);
  pdf.setFont(undefined, 'bold');
  pdf.text('Room Assignments', margin, yPosition);
  yPosition += 8;

  // Table Headers
  pdf.setFontSize(9);
  pdf.setFont(undefined, 'bold');
  const colWidth = contentWidth / 4;

  pdf.setFillColor(240, 240, 240);
  pdf.rect(margin, yPosition - 4, colWidth, 6, 'F');
  pdf.text('Room', margin + 2, yPosition);

  pdf.rect(margin + colWidth, yPosition - 4, colWidth, 6, 'F');
  pdf.text('Category', margin + colWidth + 2, yPosition);

  pdf.rect(margin + 2 * colWidth, yPosition - 4, colWidth, 6, 'F');
  pdf.text('Capacity', margin + 2 * colWidth + 2, yPosition);

  pdf.rect(margin + 3 * colWidth, yPosition - 4, colWidth, 6, 'F');
  pdf.text('Guests', margin + 3 * colWidth + 2, yPosition);

  yPosition += 8;

  // Table Content
  pdf.setFont(undefined, 'normal');

  for (const room of rooms) {
    // Check if we need a new page
    if (yPosition > pageHeight - margin - 20) {
      pdf.addPage();
      yPosition = margin;
    }

    // Get assigned attendees for this room
    const assignedAttendees = room.assignments
      .filter(a => a.attendeeId)
      .map(a => {
        const attendee = eligibleAttendees.find(att => att.id === a.attendeeId);
        return attendee
          ? `${attendee.firstName} ${attendee.lastName}`
          : 'Unknown';
      })
      .join(', ');

    // Room number
    pdf.text(`Room ${room.roomNo}`, margin + 2, yPosition);

    // Category
    pdf.text(room.category || '-', margin + colWidth + 2, yPosition);

    // Capacity (assigned/max)
    const assignedCount = room.assignments.filter(a => a.attendeeId).length;
    pdf.text(`${assignedCount}/${room.maxGuests}`, margin + 2 * colWidth + 2, yPosition);

    // Guests (wrapped text)
    const guestText = assignedAttendees || 'Unassigned';
    const splitText = pdf.splitTextToSize(guestText, colWidth - 4);
    pdf.text(splitText, margin + 3 * colWidth + 2, yPosition);

    // Adjust Y position based on text height
    const textHeight = splitText.length * 4;
    yPosition += Math.max(6, textHeight) + 2;
  }

  // 5. Footer
  yPosition += 10;
  pdf.setFontSize(8);
  pdf.setFont(undefined, 'normal');
  pdf.setTextColor(128, 128, 128);
  pdf.text(
    'This rooming plan was automatically generated by the Event Management System',
    margin,
    yPosition
  );

  // Generate filename with event name and date
  const fileName = `rooming-plan_${eventName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;

  // Save PDF
  pdf.save(fileName);
}
